package com.aurionpro.model.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.batch.BatchProperties.Job;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import com.aurionpro.model.entity.Transaction;

import jakarta.activation.DataSource;
import jakarta.persistence.EntityManagerFactory;

public class TransactionBatchConfig {

	    @Autowired
	    private EntityManagerFactory entityManagerFactory;

	    @Autowired
	    private DataSource dataSource;

	    @Bean
	    public JpaPagingItemReader<Transaction> databaseReader() {
	        return new JpaPagingItemReaderBuilder<Transaction>()
	                .name("employeeReader")
	                .entityManagerFactory(entityManagerFactory)
	                .queryString("SELECT e FROM Transaction e")
	                .pageSize(10)
	                .build();
	    }

	    @Bean
	    public FlatFileItemWriter<Transaction> writer() {
	        return new FlatFileItemWriterBuilder<Transaction>()
	                .name("employeeWriter")
	                .resource(new FileSystemResource("output/employees.csv"))
	                .lineAggregator(new DelimitedLineAggregator<Transaction>() {{
	                    setDelimiter(",");
	                    setFieldExtractor(new PassThroughFieldExtractor<>());
	                }})
	                .build();
	    }

	    @Bean
	    public Step step1(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
	        return new StepBuilder("exportDbToCsvStep", jobRepository)
	                .<Transaction, Transaction>chunk(10, transactionManager)
	                .reader(databaseReader())
	                .writer(writer())
	                .build();
	    }

	    @Bean
	    public Job exportJob(JobRepository jobRepository, Step step1) {
	        return new JobBuilder("exportJob", jobRepository)
	                .start(step1)
	                .build();
	    }
	    
	    @Bean
	    public PlatformTransactionManager transactionManager() {
	        return new DataSourceTransactionManager(dataSource);
	    }
	}


}
